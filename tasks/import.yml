# SPDX-FileCopyrightText: 2023 Slavi Pantaleev
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---
# Pre-checks

- name: Fail if playbook called incorrectly
  ansible.builtin.fail:
    msg: "The `mongodb_server_path_dump` variable needs to be provided to this playbook, via --extra-vars"
  when: "mongodb_server_path_dump is not defined or mongodb_server_path_dump.startswith('<')"

- name: Check if the provided dump directory exists
  ansible.builtin.stat:
    path: "{{ mongodb_server_path_dump }}"
  register: result_mongodb_server_path_dump_stat

- name: Fail if provided dump directory does not exist
  ansible.builtin.fail:
    msg: "File cannot be found on the server at {{ mongodb_server_path_dump }}"
  when: "not result_mongodb_server_path_dump_stat.stat.exists"

# Defaults

- name: Set mongodb_start_wait_time, if not provided
  ansible.builtin.set_fact:
    mongodb_start_wait_time: 15
  when: "mongodb_start_wait_time | default('') == ''"

- name: Set mongodb_import_wait_time, if not provided
  ansible.builtin.set_fact:
    mongodb_import_wait_time: "{{ 7 * 86400 }}"
  when: "mongodb_import_wait_time | default('') == ''"

# Actual import work

- name: Ensure MongoDB is started
  ansible.builtin.service:
    name: "{{ mongodb_identifier }}"
    state: started
    daemon_reload: true
  register: mongodb_ensure_started_result

- name: Wait a bit, so that MongoDB can start
  when: "mongodb_ensure_started_result.changed | bool"
  ansible.builtin.wait_for:
    timeout: "{{ mongodb_start_wait_time }}"
  delegate_to: 127.0.0.1
  become: false

- name: Generate MongoDB database import command
  ansible.builtin.set_fact:
    mongodb_import_command: >-
      {{ devture_systemd_docker_base_host_command_docker }} run
      --rm
      --name={{ mongodb_identifier }}-import
      --log-driver=none
      --user={{ mongodb_uid }}:{{ mongodb_gid }}
      --cap-drop=ALL
      --network={{ mongodb_container_network }}
      --env-file={{ mongodb_base_path }}/env
      --mount type=bind,src={{ mongodb_server_path_dump }},dst=/in,ro
      --entrypoint=/bin/sh
      {{ mongodb_container_image }}
      -c "mongorestore --host={{ mongodb_identifier }} -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --gzip --dir=/in"
  tags:
    - skip_ansible_lint

# This is a hack.
# See: https://ansibledaily.com/print-to-standard-output-without-escaping/
#
# We want to run `debug: msg=".."`, but that dumps it as JSON and escapes double quotes within it,
# which ruins the command (`mongodb_import_command`)
- name: Note about MongoDB importing alternative
  ansible.builtin.set_fact:
    dummy: true
  with_items:
    - >-
      Importing MongoDB database using the following command: `{{ mongodb_import_command }}`.
      If this crashes, you can stop MongoDB (`systemctl stop {{ mongodb_identifier }}`),
      delete its existing data (`rm -rf {{ mongodb_data_path }}`), start it again (`systemctl start {{ mongodb_identifier }}`)
      and manually run the above import command directly on the server.

- name: Perform MongoDB database import
  ansible.builtin.command:
    cmd: "{{ mongodb_import_command }}"
  async: "{{ mongodb_import_wait_time }}"
  poll: 10
  register: mongodb_import_mongorestore_command_result
  failed_when: not mongodb_import_mongorestore_command_result.finished or mongodb_import_mongorestore_command_result.rc != 0
  changed_when: mongodb_import_mongorestore_command_result.finished and mongodb_import_mongorestore_command_result.rc == 0

- name: Ensure MongoDB systemd service is stopped (if it previously was)
  when: "mongodb_ensure_started_result.changed | bool"
  ansible.builtin.service:
    name: "{{ mongodb_identifier }}"
    state: stopped
